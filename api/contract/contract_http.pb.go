// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.21.12
// source: contract/contract.proto

package contract

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContractServiceCreateContract = "/api.v1.contract.ContractService/CreateContract"
const OperationContractServiceDeleteContract = "/api.v1.contract.ContractService/DeleteContract"
const OperationContractServiceGetContract = "/api.v1.contract.ContractService/GetContract"
const OperationContractServiceListContract = "/api.v1.contract.ContractService/ListContract"
const OperationContractServiceListTotalContractEachRoom = "/api.v1.contract.ContractService/ListTotalContractEachRoom"
const OperationContractServiceSignContract = "/api.v1.contract.ContractService/SignContract"
const OperationContractServiceUpdateContract = "/api.v1.contract.ContractService/UpdateContract"

type ContractServiceHTTPServer interface {
	CreateContract(context.Context, *CreateContractRequest) (*CreateContractReply, error)
	DeleteContract(context.Context, *DeleteContractRequest) (*DeleteContractReply, error)
	GetContract(context.Context, *GetContractRequest) (*GetContractReply, error)
	ListContract(context.Context, *ListContractRequest) (*ListContractReply, error)
	ListTotalContractEachRoom(context.Context, *ListTotalContractEachRoomRequest) (*ListTotalContractEachRoomReply, error)
	SignContract(context.Context, *SignRequest) (*SignReply, error)
	UpdateContract(context.Context, *UpdateContractRequest) (*UpdateContractReply, error)
}

func RegisterContractServiceHTTPServer(s *http.Server, srv ContractServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/contracts", _ContractService_CreateContract0_HTTP_Handler(srv))
	r.PUT("/api/v1/contracts/{id}", _ContractService_UpdateContract0_HTTP_Handler(srv))
	r.PATCH("/api/v1/contracts/{id}/sign", _ContractService_SignContract0_HTTP_Handler(srv))
	r.DELETE("/api/v1/contracts", _ContractService_DeleteContract0_HTTP_Handler(srv))
	r.GET("/api/v1/contracts", _ContractService_GetContract0_HTTP_Handler(srv))
	r.GET("/api/v1/contracts/list", _ContractService_ListContract0_HTTP_Handler(srv))
	r.GET("/api/v1/contracts/rooms/least", _ContractService_ListTotalContractEachRoom0_HTTP_Handler(srv))
}

func _ContractService_CreateContract0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateContractRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceCreateContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContract(ctx, req.(*CreateContractRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateContractReply)
		return ctx.Result(200, reply)
	}
}

func _ContractService_UpdateContract0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateContractRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceUpdateContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateContract(ctx, req.(*UpdateContractRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateContractReply)
		return ctx.Result(200, reply)
	}
}

func _ContractService_SignContract0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceSignContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignContract(ctx, req.(*SignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignReply)
		return ctx.Result(200, reply)
	}
}

func _ContractService_DeleteContract0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteContractRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceDeleteContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteContract(ctx, req.(*DeleteContractRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteContractReply)
		return ctx.Result(200, reply)
	}
}

func _ContractService_GetContract0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetContractRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceGetContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContract(ctx, req.(*GetContractRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetContractReply)
		return ctx.Result(200, reply)
	}
}

func _ContractService_ListContract0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListContractRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceListContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListContract(ctx, req.(*ListContractRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListContractReply)
		return ctx.Result(200, reply)
	}
}

func _ContractService_ListTotalContractEachRoom0_HTTP_Handler(srv ContractServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTotalContractEachRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContractServiceListTotalContractEachRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTotalContractEachRoom(ctx, req.(*ListTotalContractEachRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTotalContractEachRoomReply)
		return ctx.Result(200, reply)
	}
}

type ContractServiceHTTPClient interface {
	CreateContract(ctx context.Context, req *CreateContractRequest, opts ...http.CallOption) (rsp *CreateContractReply, err error)
	DeleteContract(ctx context.Context, req *DeleteContractRequest, opts ...http.CallOption) (rsp *DeleteContractReply, err error)
	GetContract(ctx context.Context, req *GetContractRequest, opts ...http.CallOption) (rsp *GetContractReply, err error)
	ListContract(ctx context.Context, req *ListContractRequest, opts ...http.CallOption) (rsp *ListContractReply, err error)
	ListTotalContractEachRoom(ctx context.Context, req *ListTotalContractEachRoomRequest, opts ...http.CallOption) (rsp *ListTotalContractEachRoomReply, err error)
	SignContract(ctx context.Context, req *SignRequest, opts ...http.CallOption) (rsp *SignReply, err error)
	UpdateContract(ctx context.Context, req *UpdateContractRequest, opts ...http.CallOption) (rsp *UpdateContractReply, err error)
}

type ContractServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewContractServiceHTTPClient(client *http.Client) ContractServiceHTTPClient {
	return &ContractServiceHTTPClientImpl{client}
}

func (c *ContractServiceHTTPClientImpl) CreateContract(ctx context.Context, in *CreateContractRequest, opts ...http.CallOption) (*CreateContractReply, error) {
	var out CreateContractReply
	pattern := "/api/v1/contracts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContractServiceCreateContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContractServiceHTTPClientImpl) DeleteContract(ctx context.Context, in *DeleteContractRequest, opts ...http.CallOption) (*DeleteContractReply, error) {
	var out DeleteContractReply
	pattern := "/api/v1/contracts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContractServiceDeleteContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContractServiceHTTPClientImpl) GetContract(ctx context.Context, in *GetContractRequest, opts ...http.CallOption) (*GetContractReply, error) {
	var out GetContractReply
	pattern := "/api/v1/contracts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContractServiceGetContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContractServiceHTTPClientImpl) ListContract(ctx context.Context, in *ListContractRequest, opts ...http.CallOption) (*ListContractReply, error) {
	var out ListContractReply
	pattern := "/api/v1/contracts/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContractServiceListContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContractServiceHTTPClientImpl) ListTotalContractEachRoom(ctx context.Context, in *ListTotalContractEachRoomRequest, opts ...http.CallOption) (*ListTotalContractEachRoomReply, error) {
	var out ListTotalContractEachRoomReply
	pattern := "/api/v1/contracts/rooms/least"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContractServiceListTotalContractEachRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContractServiceHTTPClientImpl) SignContract(ctx context.Context, in *SignRequest, opts ...http.CallOption) (*SignReply, error) {
	var out SignReply
	pattern := "/api/v1/contracts/{id}/sign"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContractServiceSignContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContractServiceHTTPClientImpl) UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...http.CallOption) (*UpdateContractReply, error) {
	var out UpdateContractReply
	pattern := "/api/v1/contracts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContractServiceUpdateContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
